---
globs: **/wsclient/**/*.ts,**/LarkTrigger.node.ts
---

# WebSocket Client Development Guide

## Architecture Overview
The WebSocket client in `nodes/wsclient/` provides real-time event handling for Lark:
- [index.ts](mdc:nodes/wsclient/index.ts) - Main WSClient class
- [ws-config.ts](mdc:nodes/wsclient/ws-config.ts) - Configuration management
- [dispatcher/](mdc:nodes/wsclient/dispatcher/) - Event handling system
- [proto-buf/](mdc:nodes/wsclient/proto-buf/) - Protobuf message handling

## WSClient Usage Pattern
```typescript
import { WSClient } from '../wsclient';
import { EventDispatcher } from '../wsclient/dispatcher';

const wsClient = new WSClient({
  appId: 'your-app-id',
  appSecret: 'your-app-secret',
  domain: 'https://open.feishu.cn',
  logger: this.logger,
  helpers: this.helpers,
  autoReconnect: true,
});

// Event handlers
const handlers: Record<string, (data: any) => Promise<void>> = {
  'im.message.receive_v1': async (data) => {
    // Handle message received event
    this.emit([this.helpers.returnJsonArray(data)]);
  },
};

const eventDispatcher = new EventDispatcher({ 
  logger: this.logger, 
  isAnyEvent: false 
}).register(handlers);

await wsClient.start({ eventDispatcher });
```

## Connection Lifecycle
1. **Pull Config**: Get WebSocket URL and configuration from Lark
2. **Connect**: Establish WebSocket connection
3. **Ping Loop**: Maintain connection with periodic pings
4. **Event Handling**: Process incoming events via protobuf
5. **Reconnect**: Automatic reconnection on failures

## Event Types
Supported in [LarkTrigger.node.ts](mdc:nodes/Lark/LarkTrigger.node.ts):
- `im.message.receive_v1` - Receive messages
- `im.message.reaction.created_v1` - Message reactions
- `drive.file.bitable_record_changed_v1` - Bitable changes
- `card.action.trigger` - Card interactions
- `any_event` - Catch all events

## Event Dispatcher Patterns
```typescript
// Register specific event handlers
const eventDispatcher = new EventDispatcher({ logger, isAnyEvent: false })
  .register({
    'im.message.receive_v1': async (data) => {
      // Handle specific event
    },
    'card.action.trigger': async (data) => {
      // Handle card interactions
    },
  });

// Or handle all events
const eventDispatcher = new EventDispatcher({ logger, isAnyEvent: true })
  .register({
    'any_event': async (data) => {
      // Handle any event type
    },
  });
```

## Configuration Management
[ws-config.ts](mdc:nodes/wsclient/ws-config.ts) manages:
- Client config (appId, appSecret, domain)
- WebSocket config (URLs, intervals, reconnection settings)
- WebSocket instance management

## Error Handling
- Automatic reconnection with exponential backoff
- Connection state tracking
- Proper cleanup on manual stop
- Error logging with context

## Protobuf Messages
Messages are encoded/decoded using protobuf definitions in [proto-buf/](mdc:nodes/wsclient/proto-buf/):
- Control frames (ping/pong)
- Data frames (events)
- Headers and payload management

## Trigger Node Integration
The trigger node ([LarkTrigger.node.ts](mdc:nodes/Lark/LarkTrigger.node.ts)) provides the n8n interface:
- Configures WebSocket client with credentials
- Registers event handlers based on user selection
- Manages workflow execution with `this.emit()`
- Handles manual vs active execution modes

## Limitations
- Only one Lark trigger per bot (Lark API limitation)
- Connection requires valid app credentials
- Events are processed sequentially